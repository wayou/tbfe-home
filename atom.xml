<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[JSBear]]></title>
  
  <link href="/tbfe-home/atom.xml" rel="self"/>
  <link href="http://wayou.github.io/"/>
  <updated>2014-11-13T07:17:46.157Z</updated>
  <id>http://wayou.github.io/</id>
  
  <author>
    <name><![CDATA[JSBear Team]]></name>
    <email><![CDATA[liuyong12@baidu.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[内部平台静态开发方案2.0]]></title>
    <link href="http://wayou.github.io/2014/11/12/angularjs-new-dev-pattern/"/>
    <id>http://wayou.github.io/2014/11/12/angularjs-new-dev-pattern/</id>
    <published>2014-11-12T12:16:39.000Z</published>
    <updated>2014-11-13T07:17:35.000Z</updated>
    <content type="html"><![CDATA[<p>感谢前人「刘凯，洪堂」的成果，站在巨人的肩上继续走得更远！</p>
<p>基于自己开发的开发过程，和收集的各种不便，内部平台现对之前的静态开发方案进行了一次升级。<br>这次改进是尝试性的，为是探求更好的开发方式，改进现有工作流程，提升效率和使开发更方便。</p>
<p>同时也作为新开发方式的一种探索和实践，为新版脚手架提供参考。</p>
<a id="more"></a>

<h1 id="文件引用">文件引用</h1>
<p>之前使用异步拉取每个部分视图<code>controller</code>的方式在特殊需要时会有顺序的问题，以至于好多逻辑只能折中写到<code>app.js</code>文件里。现将之前异步方式改为同步，去掉<code>requirejs</code>，一次性将AngularJS程序的js文件引入。</p>
<p>并且Angular模块只会在调用时被实例化，所以提前到页面也不会浪费资源。</p>
<h1 id="目录结构">目录结构</h1>
<p><img src="/tbfe-home/asset/posts/2014-11-12-angularjs-new-dev-pattern/angular.png" alt=""></p>
<p>上图只列出了与静态文案相关的目录及文件，现描述如下：</p>
<h2 id="control">control</h2>
<p>control 文件与原来的一样</p>
<h2 id="template">template</h2>
<p> <code>template 文件</code>里引用 <code>devplatcommon 基础库</code> 模块的部分与原来一样，只是引用项目启动文件的方式进行了改变。</p>
<p> fis配置中将会在 <code>static/project_name/</code> 下生成一个 <code>app_all.js</code> 文件，在template里面将原来引用<code>app.js</code>的地方替换为引用此文件。</p>
<figure class="highlight php"><figcaption><span>before</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如下代码用将由框架负责处理js资源加载到页面</div><div class="line"> */</div><div class="line"><span class="keyword">echo</span> HTML::js(<span class="string">'project_name/app.js'</span>, <span class="string">"module_name"</span>);</div><div class="line"><span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>



<figure class="highlight php"><figcaption><span>after</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如下代码用将由框架负责处理js资源加载到页面</div><div class="line"> */</div><div class="line"><span class="keyword">echo</span> HTML::js(<span class="string">'project_name/app_all.js'</span>, <span class="string">"module_name"</span>);</div><div class="line"><span class="preprocessor">?&gt;</span></div></pre></td></tr></table></figure>

<p>区别在于之前在template里引用的是AngularJS的主程序入口文件，而现在的<code>app_all.js</code>是整个AngularJS程序所有文件合并的结果。</p>
<h2 id="static_文件夹">static 文件夹</h2>
<p>static里面项目的组织有变化。</p>
<p>先是一个<code>app文件夹</code>，以将AngularJS程序与其他静态文件区分开。</p>
<p>app下面是以项目为单位分开的文件夹，里面存放项目主要的静态文件，主要是:</p>
<ul>
<li><code>app.js</code> AngularJS程序的主入口文件</li>
<li><code>views</code>文件夹，存放部分视图<code>HTML</code> 文件及视图对应的<code>Controller</code> 文件</li>
<li><code>services</code> 文件夹，存放本项目公用服务</li>
<li><code>directives</code> 文件夹，存放项目公用<code>directive</code></li>
<li><code>resources</code> 文件夹，存放本项目公用<code>resource</code>文件</li>
<li><code>filters</code> 文件夹，存放本项目公用<code>filters</code></li>
</ul>
<h3 id="app-js">app.js</h3>
<p>app.js为angular程序主入口文件，与原来的app.js文件有较大区别。</p>
<p>这里开始定义的JS文件未采用<code>require</code>方式定义模块，而是直接通过AngularJS方式定义。</p>
<p>先是定义项目主模块并注入基础服务：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = angular.module(<span class="string">'project_name'</span>, [</div><div class="line">    <span class="string">'ngRoute'</span>,</div><div class="line">    <span class="string">'ngResource'</span>,</div><div class="line">    <span class="string">'ui.bootstrap'</span>,</div><div class="line">    <span class="string">'ngCommon'</span></div><div class="line">]);</div></pre></td></tr></table></figure>

<p>之后是对项目进行初始配置,主要是设置路由。<br>由于不用异步拉取相应部分视图的<code>controller</code>文件，所以不用像<code>ngCommon</code> 库里面定义的<code>routeResolverProvider</code>服务那样去手动处理，而是通过AngularJS原生的方式来配置路由及指定<code>controller</code>。</p>
<figure class="highlight js"><figcaption><span>before</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.config([</div><div class="line">    <span class="string">'$routeProvider'</span>,</div><div class="line">    <span class="string">'routeResolverProvider'</span>,</div><div class="line">    <span class="string">'$httpProvider'</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">($routeProvider, routeResolverProvider, $httpProvider)</span> </span>{</div><div class="line">        <span class="keyword">var</span> route = routeResolverProvider.route;</div><div class="line">        $routeProvider</div><div class="line"></div><div class="line">        .when(<span class="string">'/view1'</span>, route.resolve({</div><div class="line">            templateUrl: __uri(<span class="string">'./view/view1/view1.html'</span>),</div><div class="line">            controllerUrl: __uri(<span class="string">'./view/view1_controller.js'</span>)</div><div class="line">        }))</div><div class="line"></div><div class="line">        .when(<span class="string">'/view2'</span>, route.resolve({</div><div class="line">            templateUrl: __uri(<span class="string">'./view2/view2.html'</span>),</div><div class="line">            controllerUrl: __uri(<span class="string">'./view2/view2_controller.js'</span>)</div><div class="line">        }))</div><div class="line"></div><div class="line">        .otherwise({</div><div class="line">            redirectTo: <span class="string">'/view1'</span></div><div class="line">        });</div><div class="line"></div><div class="line">    }</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="comment">// Dynamic loading controller register setup.</span></div><div class="line">angular.module(<span class="string">'ngCommon'</span>).setupRegister(<span class="built_in">module</span>);</div><div class="line"></div><div class="line">angular.bootstrap(<span class="built_in">document</span>, [<span class="built_in">module</span>.name]);</div></pre></td></tr></table></figure>



<figure class="highlight js"><figcaption><span>after</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.config([</div><div class="line">    <span class="string">'$routeProvider'</span>,</div><div class="line">    <span class="string">'$httpProvider'</span>,</div><div class="line">    <span class="function"><span class="keyword">function</span><span class="params">($routeProvider, $httpProvider)</span> </span>{</div><div class="line">        $routeProvider</div><div class="line">            .when(<span class="string">'/view1'</span>, {</div><div class="line">                templateUrl: __uri(<span class="string">'./views/view1/view1.html'</span>),</div><div class="line">                controller: <span class="string">'View1Ctrl'</span></div><div class="line">            })</div><div class="line">            .when(<span class="string">'/view2'</span>, {</div><div class="line">                templateUrl: __uri(<span class="string">'./views/view2/view2.html'</span>),</div><div class="line">                controller: <span class="string">'View2Ctrl'</span></div><div class="line">            })</div><div class="line"></div><div class="line">        .otherwise({</div><div class="line">            redirectTo: <span class="string">'/view1'</span></div><div class="line">        });</div><div class="line">    }</div><div class="line">]);</div><div class="line"><span class="comment">//启动Angular程序</span></div><div class="line">angular.bootstrap(<span class="built_in">document</span>, [<span class="built_in">module</span>.name]);</div></pre></td></tr></table></figure>

<p>其中在<code>controller</code> 里指定controller名称,而不是对应的文件路径。同时也不需要原先<code>app.js</code> 中最后两行注册模块及启动程序的代码。</p>
<h3 id="views文件夹"><code>views</code>文件夹</h3>
<p>此文件夹下存放部分视图<code>HTML</code> 文件及视图对应的<code>Controller</code> 文件，按功能或者说按页面进行划分。</p>
<ul>
<li>view1</li>
<li>view2</li>
<li>…</li>
</ul>
<p>如果还需要本部分视图单独使用的<code>filter</code>,<code>service</code> 或<code>resource</code>等，将单独的js文件放到对应部分视图目录下即可。</p>
<ul>
<li>view1.html</li>
<li>view1_controller.js</li>
<li>…</li>
</ul>
<p>其中，现在的开发方式不需要在<code>view.html</code> 中指定<code>ng-congtroller</code>, 因为这个工作已经在路由配置时做了。</p>
<h3 id="services_文件夹"><code>services</code> 文件夹</h3>
<p>存放本项目公用服务。进行复杂业务逻辑的处理或繁杂运算等。</p>
<h3 id="directives_文件夹"><code>directives</code> 文件夹</h3>
<p>存放本项目公用的<code>directive</code>,一般是一些页面的组件。</p>
<h3 id="resources_文件夹"><code>resources</code> 文件夹</h3>
<p>存放本项目公用<code>resource</code>文件, 用于与后端交互，获取及提交数据。</p>
<h3 id="filters_文件夹"><code>filters</code> 文件夹</h3>
<p>存放本项目公用<code>filters</code>。控制页面显示，特别是一些需要处理数字文本转换，控制日期格式等的场景，还有就是页面上需要进行条件性的展示。</p>
<h1 id="fis-conf-js">fis-conf.js</h1>
<p>利用fis将所有AngularJS程序需要的JS文件打包成一个，之后再引入到<code>template</code> 文件里。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//配置要合并的代码，即之前的__merge_conf.php配置的内容</span></div><div class="line">fis.config.merge({</div><div class="line">    pack: {</div><div class="line">        <span class="string">'static/project1/app_all.js'</span>: [</div><div class="line">            <span class="regexp">/static\/project1\/.*.js/</span></div><div class="line">        ],</div><div class="line">        <span class="string">'static/project2/app_all.js'</span>: [</div><div class="line">            <span class="regexp">/static\/project2\/.*.js/</span></div><div class="line">        ]</div><div class="line">    }</div><div class="line">});</div></pre></td></tr></table></figure>

<h1 id="总结">总结</h1>
<p>除了以上变更，其他部分与之前的设计是一样的。对于开发者来说，使用起来没有额外的学习成本，只需专注开发部分视图部分，如果后期脚架支持，则开发者完全感受不到变化。<br>升级文案的落实过程中，遇到一些文件加载的问题，经过多次尝试努力后成功，感谢东伟的帮助，段君的提议等。</p>
<p>祝同学们开发愉快! Happy Coding~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>感谢前人「刘凯，洪堂」的成果，站在巨人的肩上继续走得更远！</p>
<p>基于自己开发的开发过程，和收集的各种不便，内部平台现对之前的静态开发方案进行了一次升级。<br>这次改进是尝试性的，为是探求更好的开发方式，改进现有工作流程，提升效率和使开发更方便。</p>
<p>同时也作为新开发方式的一种探索和实践，为新版脚手架提供参考。</p>
]]>
    
    </summary>
    
      <category term="angularjs" scheme="http://wayou.github.io/tags/angularjs/"/>
    
      <category term="开发" scheme="http://wayou.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="文档" scheme="http://wayou.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://wayou.github.io/2014/10/22/hello-world/"/>
    <id>http://wayou.github.io/2014/10/22/hello-world/</id>
    <published>2014-10-22T06:16:32.000Z</published>
    <updated>2014-10-30T02:42:31.000Z</updated>
    <content type="html"><![CDATA[<p class="text-success">Welcome, dude!</p>

<h1 id="初见/Intro">初见/Intro</h1>
<p><span class="dropcap">这</span>是使用<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>搭建的静态站点，基于<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>，内容采用<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown</a> 撰写。</p>
<p>这里，我们进行知识分享扩散，文档整理存放，项目展示介绍。随着时间的推移，会沉淀更多的内容。</p>
<p>时间就像一坛尘封的酒酿，若干年后，就会发现它的醇香。</p>
<p>这里也是。</p>
<a id="more"></a>

<h1 id="本地运行/Run">本地运行/Run</h1>
<p>下面的步骤可以让你快速安装环境，运行本站点。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  <p>在正式开始前，你需要以下原料：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a> </li>
<li><a href="http://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
</div>

<h2 id="克隆项目">克隆项目</h2>
<p>克隆本项目到本地。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir jsbear</div><div class="line"><span class="built_in">cd</span> jsbear</div><div class="line">git clone https://github.com/wayou/tbfe-home.git</div></pre></td></tr></table></figure>

<h2 id="安装Hexo">安装Hexo</h2>
<p>本地安装Hexo静态站点生成器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g</div></pre></td></tr></table></figure>

<h2 id="安装依赖包">安装依赖包</h2>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm i</div><div class="line"><span class="comment"># 或者</span></div><div class="line">npm install</div></pre></td></tr></table></figure>

<h2 id="启动服务器">启动服务器</h2>
<p>准备好了吗？使用下面的命令，来打开站点吧！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo s</div><div class="line"><span class="comment"># 或者</span></div><div class="line">hexo server</div></pre></td></tr></table></figure>

<p>服务器启动后，在浏览器地址栏输入<code>localhost</code> 进行访问。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  <p>服务器启动后可以按「Ctrl+C」将其停止</p>
</div>

<h1 id="书写/Writing">书写/Writing</h1>
<h2 id="创建新贴">创建新贴</h2>
<p>使用如下命令创建新贴。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"My New Post"</span> <span class="comment">#最好用英文</span></div></pre></td></tr></table></figure>

<p>它会在项目的<code>source/_posts/</code> 路径下创建一个时间加文章标题的<code>.md</code> 文件。我在这个文件中书写文章内容。</p>
<h2 id="文章选项">文章选项</h2>
<p>上面方法创建的文件中，头部包含了该篇文章的一些配置信息，所以你看到的应该是下面这个样子：</p>
<figure class="highlight markdown"><figcaption><span>以本文的头部信息作示例</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">title: Hello World  #文章的标题，这里可以换成中文</div><div class="line">toc: true   #是否显示文章目录，即右侧自动高亮的目录树</div><div class="line">dropcap: false  #是否启用drocap，类似报刊杂志首字增大的效果</div><div class="line">date: 2014-10-22 14:16:32   #文章创建的时间，匆改</div><div class="line">author: wayou   #需要显示的作者名，可选</div><div class="line">feature: asset/posts/2014-10-22-hello-world/hexo_logo.png    #显示在首页的文章头图，如果不需要可以去掉此项</div><div class="line">description: 本文纯粹吐槽 #显示在文章顶部的描述，可选</div><div class="line">categories: 文档  #文章分类，可选</div><div class="line">tags:   #文章标签，可选</div><div class="line"><span class="bullet">- </span>hexo</div><div class="line"><span class="header">- markdown</span></div><div class="line">---</div><div class="line"></div><div class="line">这里开始正文</div><div class="line"></div><div class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span>  #在正文中写了此注释，则注释前的内容将作为文章摘要显示在首页</div><div class="line"></div><div class="line">这里继续正文</div></pre></td></tr></table></figure>

<h2 id="句法">句法</h2>
<p>使用Markdown句法，我们可以很方便地写出简单优雅的排版。<br>如果你未曾了解过，让我们一起来简单熟悉一些常用MD句法。如果你已经了解，则路过。</p>
<h3 id="标题">标题</h3>
<p>在MD中，以<code>#</code>号开头来标识这一行是标题，个数对应HTML中<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>，这个很好理解。</p>
<div class="alert alert-info"><i class="fa fa-info"></i>  <p>为了不影响左边文章目录，下面的示例省去了一二三级标题</p>
</div>

<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="header">#### 四级标题</span></div><div class="line"><span class="header">##### 五级标题</span></div><div class="line"><span class="header">###### 六级标题</span></div></pre></td></tr></table></figure>

<p>结果：</p>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题">六级标题</h6>
<h3 id="链接与图片">链接与图片</h3>
<p>链接与图片是书写丰富文章所必备的元素，下面我们来看看。</p>
<h4 id="链接">链接</h4>
<p>MD中链接句法为方括号包裹链接文字，圆括号包裹链接地址。大家看下面的示例感受下。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="link_label">Hi, 约么？</span>](<span class="link_url">http://shurufa.baidu.com/</span>)</div></pre></td></tr></table></figure>

<p>结果：<br><a href="http://shurufa.baidu.com/" target="_blank" rel="external">Hi, 约么？</a></p>
<p><br></p>
<h4 id="图片">图片</h4>
<p>图文并茂的页面让人更能够赏心悦目。所以你应该不会吝啬多放几张图片。</p>
<p>MD中图片的写法与链接极其相似，只是链接前端多了个叹号，仅此而以。</p>
<p>同样，我们看一个示例感受下。</p>
<p>美图将至，屏住呼吸。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="link_label">bigger that bigger</span>](<span class="link_url">asset/posts/2014-10-22-hello-world/hexo_logo.png</span>)</div></pre></td></tr></table></figure>

<p>结果：<br><img src="/tbfe-home/asset/posts/2014-10-22-hello-world/btb.jpg" alt="bigger that bigger"></p>
<h3 id="强调与斜体">强调与斜体</h3>
<p>关于这两者，我们分别都有两种选择，请看下面的示例。</p>
<h4 id="斜体">斜体</h4>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*single asterisks*</span></div><div class="line"></div><div class="line"><span class="emphasis">_single underscores_</span></div></pre></td></tr></table></figure>

<p>结果：</p>
<p><em>single asterisks</em></p>
<p><em>single underscores</em></p>
<h4 id="强调">强调</h4>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**double asterisks**</span></div><div class="line"></div><div class="line"><span class="strong">__double underscores__</span></div></pre></td></tr></table></figure>

<p>结果</p>
<p><strong>double asterisks</strong></p>
<p><strong>double underscores</strong></p>
<h3 id="列表">列表</h3>
<p>通过列表表达观点，列举论据，显得思路清晰，表达流畅，更能说服读者。<br>在MD中，列表可以通过如下形式实现。</p>
<h4 id="无序列表">无序列表</h4>
<p>下面是无序列表的示例</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>列表项1</div><div class="line"><span class="bullet">* </span>列表项2</div><div class="line"><span class="bullet">* </span>列表项3</div><div class="line"></div><div class="line"><span class="header">#另一种写法</span></div><div class="line"><span class="bullet">- </span>列表项1</div><div class="line"><span class="bullet">- </span>列表项2</div><div class="line"><span class="bullet">- </span>列表项3</div></pre></td></tr></table></figure>

<ul>
<li>列表项1</li>
<li>列表项2</li>
<li>列表项3</li>
</ul>
<ul>
<li>列表项1</li>
<li>列表项2</li>
<li>列表项3</li>
</ul>
<p><br></p>
<h4 id="有序列表">有序列表</h4>
<p>下面是有序列表的示例</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>列表项1</div><div class="line"><span class="bullet">2. </span>列表项2</div><div class="line"><span class="bullet">3. </span>列表项3</div></pre></td></tr></table></figure>

<ol>
<li>列表项1</li>
<li>列表项2</li>
<li>列表项3</li>
</ol>
<p><br></p>
<h4 id="嵌套列表">嵌套列表</h4>
<p>下面是列表嵌套的示例</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>列表项1</div><div class="line"><span class="code">    * 项目1的子项</span></div><div class="line"><span class="code">    * 项目1的子项</span></div><div class="line"><span class="code">    * 项目1的子项</span></div><div class="line"><span class="bullet">2. </span>列表项2</div><div class="line"><span class="code">    * 项目2的子项</span></div><div class="line"><span class="code">    * 项目2的子项</span></div><div class="line"><span class="code">    * 项目2的子项</span></div><div class="line"><span class="bullet">3. </span>列表项3</div></pre></td></tr></table></figure>

<ol>
<li>列表项1<ul>
<li>项目1的子项</li>
<li>项目1的子项</li>
<li>项目1的子项</li>
</ul>
</li>
<li>列表项2<ul>
<li>项目2的子项</li>
<li>项目2的子项</li>
<li>项目2的子项</li>
</ul>
</li>
<li>列表项3</li>
</ol>
<h3 id="代码">代码</h3>
<p>在MD中，书写代码块也是非常便捷的，句法如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` <span class="attr_selector">[language]</span> <span class="attr_selector">[title]</span> <span class="attr_selector">[url]</span> <span class="attr_selector">[link text]</span></div><div class="line"><span class="tag">code</span> <span class="tag">goes</span> <span class="tag">here</span></div><div class="line">```</div></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight"><pre>{% code [title] [lang:language] [url] [link text] %}<br>code goes here<br>{% endcode %}<br></pre></figure>


<p>一个JS代码的示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">`<span class="javascript"></span>``<span class="javascript">javascript _.compact https:<span class="comment">//lodash.com/docs  lodash.js</span></span></div><div class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);</div><div class="line"><span class="comment">// → [1, 2, 3]</span></div><div class="line">``<span class="javascript"></span>`</div></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight javascript"><figcaption><span>_.compact</span><a href="https://lodash.com/docs" target="_blank" rel="external">lodash.js</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_.compact([<span class="number">0</span>, <span class="number">1</span>, <span class="literal">false</span>, <span class="number">2</span>, <span class="string">''</span>, <span class="number">3</span>]);</div><div class="line"><span class="comment">// → [1, 2, 3]</span></div></pre></td></tr></table></figure>

<h3 id="引用">引用</h3>
<p>引经据典是另一种增强说服力，彰显才识的方法。<br>MD中书写引用可以用如下简便的方式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">&gt; 原谅我这一生不鸡放纵爱自由</span></span></div><div class="line">&gt; 也会怕有一天会跌倒</div></pre></td></tr></table></figure>

<p>结果</p>
<blockquote>
<p>原谅我这一生不鸡放纵爱自由<br>也会怕有一天会跌倒</p>
</blockquote>
<p>也可以用以下方式书写更加健壮的引用，带出处，带连接。</p>
<figure class="highlight"><pre>{% blockquote @风一直在吹 <a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">https://twitter.com/devdocs/status/356095192085962752</a> %}<br>我这一生都在输，因为我不断战胜自己<br>{% endblockquote %}<br></pre></figure>


<p>结果</p>
<blockquote>

<p>我这一生都在输，因为我不断战胜自己</p>
<footer><strong>@风一直在吹</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">twitter.com/devdocs/status/&hellip;</a></cite></footer></blockquote>


<h3 id="Bootstrap_标签">Bootstrap 标签</h3>
<p>除了常规的MD句法，本主题内还可以书写一些Bootstrap句法，以此来让页面更加漂亮。<br>本主题基于<a href="https://github.com/wzpan/hexo-theme-freemind" target="_blank" rel="external">freemind</a>, 使用了其中的<a href="https://github.com/wzpan/hexo-tag-bootstrap" target="_blank" rel="external">hexo-tag-bootstrap</a>。</p>
<p>具体信息可以访问<a href="http://hahack.tk/hexo-theme-freemind/2014/03/16/tag-plugins-cn/" target="_blank" rel="external">这里</a>查看，下面是文字颜色的简单示例。</p>
<figure class="highlight"><pre>{% textcolor muted %}话说天下大势，分久必合，合久必分{% endtextcolor %}<br>{% textcolor primary %}话说天下大势，分久必合，合久必分{% endtextcolor %}<br>{% textcolor success %}话说天下大势，分久必合，合久必分{% endtextcolor %}<br>{% textcolor info %}话说天下大势，分久必合，合久必分{% endtextcolor %}<br>{% textcolor warning %}话说天下大势，分久必合，合久必分{% endtextcolor %}<br>{% textcolor danger %}话说天下大势，分久必合，合久必分{% endtextcolor %}<br></pre></figure>


<p>结果：</p>
<p class="text-muted">话说天下大势，分久必合，合久必分</p><p class="text-primary">话说天下大势，分久必合，合久必分</p><p class="text-success">话说天下大势，分久必合，合久必分</p><p class="text-info">话说天下大势，分久必合，合久必分</p><p class="text-warning">话说天下大势，分久必合，合久必分</p><p class="text-danger">话说天下大势，分久必合，合久必分</p>

<h2 id="预览">预览</h2>
<p>书写过程中，你可能想要进行预览与效果查看，还记得之前我们已经将服务器在本地启动，直接刷新页面即可看到新增的文章入写入的改动。</p>
<p>但由于一些不为人知的原因，偶尔可能会出现更改未现效果，或者同名文章冗余的Bug。不要担心，<code>Ctrl+C</code> 停掉服务器，输入下面的命令清理一下缓存，再重新启动服务器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean <span class="comment">#删除之前生成的文件</span></div><div class="line">hexo s <span class="comment">#再次启动服务器进行预览</span></div></pre></td></tr></table></figure>

<h1 id="内容管理/_Content_Mgmt">内容管理/ Content Mgmt</h1>
<p>在书写文章过程中，我们需要的一些资源，比如附件，图片等，约定放在<code>source/asset/</code> 下面。</p>
<p>在此路径下新建一个与该文章名字一样的文件夹，里面存放该文章需要用到的全部资源。</p>
<p>而<code>asset</code>下面还有一个<code>common</code>文件夹，里面存放一些共用的资源，比如你写了一篇关于HTML5的文章，并且希望在首页显示一个HTML5 logo的缩略图，那么这个图片就应该存放在<code>common</code>里，因为另外的人以后可能也会分享相关文章，这时他就不必另取图片，而直接用<code>common</code>里的即可。</p>
<h1 id="提交/_Commit">提交/ Commit</h1>
<p>完成了你的内容新增，我们来到提交步骤。</p>
<h2 id="文件生成">文件生成</h2>
<p>首先需要将原始<code>.md</code> 文件及所有模板文件生成我们需要的静态HTML资源。<br>并且你可能希望这些生成的<code>js</code>,<code>css</code>以及<code>HTML</code>是经过压缩混淆的。<br>所以我们首先运行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo o</div><div class="line"><span class="comment">#抑或</span></div><div class="line">hexo optimize</div></pre></td></tr></table></figure>

<h2 id="部署">部署</h2>
<p>这样我们得到了静态资源，可以直接部署到服务器端了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo d</div><div class="line"><span class="comment">#抑或</span></div><div class="line">hexo deploy</div></pre></td></tr></table></figure>

<p>FYI. 这两步操作可以通过下面的命令合为一条</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo o <span class="operator">-d</span></div></pre></td></tr></table></figure>

<h2 id="提交更改">提交更改</h2>
<p>上面的部署只是将静态文件进行了部署，但你或许希望你的更改能够永久生效，所以将本项目的更改提交到Git也是不能少的步骤。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add --all</div><div class="line">git push origin master</div></pre></td></tr></table></figure>

<p>到这里，便完成了整个站点的更新。</p>
<p>接下来，</p>
<p>即刻出发，享受书写来带的乐趣吧！</p>
<h1 id="附录/_Appendix">附录/ Appendix</h1>
<ul>
<li><a href="http://hexo.io/" target="_blank" rel="external">参见更多Hexo的信息</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">更加详尽的Markdown句法说明</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p class="text-success">Welcome, dude!</p>

<h1 id="初见/Intro">初见/Intro</h1>
<p><span class="dropcap">这</span>是使用<a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>搭建的静态站点，基于<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>，内容采用<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">Markdown</a> 撰写。</p>
<p>这里，我们进行知识分享扩散，文档整理存放，项目展示介绍。随着时间的推移，会沉淀更多的内容。</p>
<p>时间就像一坛尘封的酒酿，若干年后，就会发现它的醇香。</p>
<p>这里也是。</p>
]]>
    
    </summary>
    
      <category term="hexo" scheme="http://wayou.github.io/tags/hexo/"/>
    
      <category term="markdown" scheme="http://wayou.github.io/tags/markdown/"/>
    
      <category term="文档" scheme="http://wayou.github.io/categories/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
</feed>
